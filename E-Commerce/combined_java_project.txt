File: C:\project\E-Commerce\src\main\java\com\sparta\ecommerce\ECommerceApplication.java 
-------- 
package com.sparta.ecommerce;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ECommerceApplication {

	public static void main(String[] args) {
		SpringApplication.run(ECommerceApplication.class, args);
	}

}
 
 
-------- 
 
File: C:\project\E-Commerce\src\test\java\com\sparta\ecommerce\ECommerceApplicationTests.java 
-------- 
package com.sparta.ecommerce;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ECommerceApplicationTests {

	@Test
	void contextLoads() {
	}

}
 
 
-------- 
 
File: C:\project\E-Commerce\build.gradle 
-------- 
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation project(':common')
	implementation project(':user-service')  // 임시로 user 서비스 참조
	implementation project(':product-service')  // 임시로 product 서비스 참조
	// Spring Boot JPA와 Web을 사용하기 위한 의존성
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// AES 암호화/복호화를 위한 Spring Security 의존성 추가
	// 암호 해싱을 위한 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// Lombok 사용을 위한 의존성
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MySQL 데이터베이스 드라이버
	runtimeOnly 'com.mysql:mysql-connector-j'

	// 테스트 관련 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Spring Boot 이메일 전송 의존성
    implementation 'org.springframework.boot:spring-boot-starter-mail'

	// JWT token
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	enabled = false
}
 
 
-------- 
 
File: C:\project\E-Commerce\settings.gradle 
-------- 
rootProject.name = 'E-Commerce'

include 'common'
include 'eureka-server'
include 'gateway-service'
include 'user-service'
include 'product-service'
include 'order-service' 
 
-------- 
 
File: C:\project\E-Commerce\Dockerfile 
-------- 
# 1. 베이스 이미지 지정
FROM eclipse-temurin:21-jdk-alpine

# 2. 작업 디렉토리 설정
WORKDIR /app

# 3. 빌드된 JAR 파일을 컨테이너로 복사
COPY build/libs/*.jar /app/myapp.jar

# 4. JAR 파일 실행 명령어 설정
ENTRYPOINT ["java", "-jar", "/app/myapp.jar"] 
 
-------- 
 
File: C:\project\E-Commerce\docker-compose.yml 
-------- 
version: '3.9'
services:
  eureka-server:
    build:
      context: ./eureka-server  # Eureka 서버 소스 코드가 위치한 경로
      dockerfile: Dockerfile  # 해당 서비스에 사용할 Dockerfile
    ports:
      - "8761:8761"  # 외부 포트 8761을 컨테이너의 8761 포트에 매핑
    environment:
      - SPRING_PROFILES_ACTIVE=default  # 프로파일 설정 (필요한 경우)
    networks:
      - eureka-net

  db:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: project
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -p1234 && sleep 5"]
      interval: 5s
      retries: 10
    networks:
      - eureka-net

  common:
    build:
      context: ./common
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      eureka-server:
        condition: service_started
    ports:
      - "8084:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/project?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=1234
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    networks:
      - eureka-net

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      eureka-server:
        condition: service_started
    ports:
      - "8081:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/project?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=1234
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    networks:
      - eureka-net

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      eureka-server:
        condition: service_started
    ports:
      - "8082:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/project?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=1234
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    networks:
      - eureka-net

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      eureka-server:
        condition: service_started
    ports:
      - "8083:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/project?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=1234
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
    networks:
      - eureka-net

volumes:
  mysql_data:

networks:
  eureka-net:
 
 
-------- 
 
